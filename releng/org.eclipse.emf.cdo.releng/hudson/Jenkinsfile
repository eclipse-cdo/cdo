pipeline {
  agent any

   options {
    timeout(time: 120, unit: 'MINUTES')
    buildDiscarder(logRotator(numToKeepStr: '10'))
    disableConcurrentBuilds()
    // skipDefaultCheckout true
    checkoutToSubdirectory('git')
  }

  triggers {
     cron('0 1 * * 5')
  }

  tools {
    jdk 'temurin-jdk21-latest'
    ant 'apache-ant-latest'
    maven 'apache-maven-latest'
  }

  environment {
    CHECKOUT = 'false'
    BUILD_TIMESTAMP = sh(returnStdout: true, script: 'date +%Y%m%d-%H%M').trim()
  }


  parameters {
    choice(
      name: 'BUILD_TYPE',
      choices: ['<default>', 'N', 'I', 'S', 'R'],
      description: '''
        Choose the type of build.
        '''
    )

    booleanParam(
      name: 'SKIP_TESTS',
      defaultValue: false,
      description: 'Whether to skip the tests.'
    )
  }

  stages {
    stage('Initialize Build Info') {
      steps {
        withAnt {
          sh '''
            ant -f git/releng/org.eclipse.emf.cdo.releng/hudson/build-info.ant
          '''
        }
        
        script {
          def props = readProperties(file: 'build-info.properties')
          env.BUILD_VERSION = props['build.version']
          env.BUILD_TYPE_EFFECTIVE = props['build.type']
          env.BUILD_QUALIFIER_DATE = props['build.qualifier.date']
          env.BUILD_QUALIFIER = props['build.qualifier']
          env.BUILD_SIGN = props['build.sign']
          env.BUILD_TRIGGER = props['build.trigger']
          env.SKIP_TESTS = params.SKIP_TESTS

          // sh "printenv | sort"
          
          currentBuild.description = env.BUILD_QUALIFIER
        }
      }
    }

    stage('Checkout Git Branch') {
      when {
        environment name: 'CHECKOUT', value: 'true'
      }
      steps {
        script {
          def gitVariables = checkout(
            poll: false,
            scm: [
              $class: 'GitSCM',
              branches: [[name: '*' + '/master']],
              doGenerateSubmoduleConfigurations: false,
              submoduleCfg: [],
              extensions: [
                [$class: 'CloneOption', shallow: false],
                [$class: 'RelativeTargetDirectory', relativeTargetDir: 'git']
              ],
              userRemoteConfigs: [[url: 'https://github.com/eclipse-cdo/cdo.git' ]]
            ]
          )

          echo "$gitVariables"
          env.GIT_COMMIT = gitVariables.GIT_COMMIT
        }
      }
    }

    stage('Rewrite Target Definition') {
      steps {
        withAnt(installation: 'apache-ant-latest') {
          sh '''
            ant -f git/releng/org.eclipse.emf.cdo.releng/hudson/rewrite-target-definition.ant
          '''
        }
      }
    }

    stage('Build With Tycho') {
      steps {
        sshagent(['projects-storage.eclipse.org-bot-ssh']) {
          sh '''
            export MAVEN_OPTS="-XX:MaxRAMPercentage=30"
            mvn \
              -f git/pom.xml \
              --no-transfer-progress \
              -DBUILD_INFO_PROPERTIES=$WORKSPACE/build-info.properties \
              -DCDO_TESTS=IntegrationTests \
              -DSIGNING_MARKER=$WORKSPACE/signing.marker \
              -DskipTests=$SKIP_TESTS \
              clean \
              verify
            '''
        }
      }
    }
    
    stage('Generate Additional Artifacts') {
      when {
        branch 'master'
      }
      steps {
        withAnt(installation: 'apache-ant-latest') {
          sh '''
            ant -f git/releng/org.eclipse.emf.cdo.releng/hudson/generate.ant -Dskip.tests=$SKIP_TESTS
          '''
        }
      }
    }
  }

  post {
    always {
      junit testResults: 'tests/test-report.xml', 
        allowEmptyResults: true
        
      archiveArtifacts artifacts: 'binary/**, features/**, plugins/**, zips/**, tests/**, help/**, *.jar, *.html, *.xml, *.index, *.css, *.txt, *.properties, build-results.*',
        allowEmptyArchive: true
    }

    failure {
      mail to: 'stepper@esc-net.de',
        subject: "[CDO CI] Build Failure ${currentBuild.fullDisplayName}",
        mimeType: 'text/html',
        body: "Project: ${env.JOB_NAME}<br/>Build Number: ${env.BUILD_NUMBER}<br/>Build URL: ${env.BUILD_URL}<br/>Console: ${env.BUILD_URL}/console"
    }

    fixed {
      mail to: 'stepper@esc-net.de',
        subject: "[CDO CI] Back to normal ${currentBuild.fullDisplayName}",
        mimeType: 'text/html',
        body: "Project: ${env.JOB_NAME}<br/>Build Number: ${env.BUILD_NUMBER}<br/>Build URL: ${env.BUILD_URL}<br/>Console: ${env.BUILD_URL}/console"
    }

    cleanup {
      deleteDir()
    }
  }
}
